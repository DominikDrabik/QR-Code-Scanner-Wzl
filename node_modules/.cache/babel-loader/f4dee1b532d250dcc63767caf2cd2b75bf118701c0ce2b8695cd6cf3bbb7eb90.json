{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dominik\\\\Desktop\\\\sem4\\\\Spp\\\\qr_nwe\\\\my-app\\\\src\\\\App.js\";\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const scanner = new Html5QrcodeScanner('reader', {\n    qrbox: {\n      width: 250,\n      height: 250\n    },\n    fps: 5\n  });\n  scanner.render(onScanSuccess, onScanError);\n  function onScanSuccess(qrCodeMessage) {\n    // handle on success condition with the decoded message\n    scanner.clear(); // stop scanning\n    setScanResult(qrCodeMessage);\n    console.log(qrCodeMessage);\n  }\n  function onScanError(errorMessage) {\n    // handle on error condition with the error message\n    console.log(errorMessage);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"QR Code Scanning in React\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Html5QrcodeScanner","useState","jsxDEV","_jsxDEV","App","scanner","qrbox","width","height","fps","render","onScanSuccess","onScanError","qrCodeMessage","clear","setScanResult","console","log","errorMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dominik/Desktop/sem4/Spp/qr_nwe/my-app/src/App.js"],"sourcesContent":["import { Html5QrcodeScanner } from \"html5-qrcode\";\nimport { useState } from \"react\";\n\nfunction App() {\n\n  const scanner  = new Html5QrcodeScanner('reader', {\n    qrbox: { width: 250, height: 250 },\n    fps: 5,  \n});\n\nscanner.render(onScanSuccess, onScanError);\n\nfunction onScanSuccess(qrCodeMessage) {\n    // handle on success condition with the decoded message\n    scanner.clear(); // stop scanning\n    setScanResult(qrCodeMessage);\n    console.log(qrCodeMessage);\n}\n\nfunction onScanError(errorMessage) {  \n    // handle on error condition with the error message\n    console.log(errorMessage); \n}\n\n  return (\n    <div className=\"App\">\n      <h1>QR Code Scanning in React</h1>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,kBAAkB,QAAQ,cAAc;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAEb,MAAMC,OAAO,GAAI,IAAIL,kBAAkB,CAAC,QAAQ,EAAE;IAChDM,KAAK,EAAE;MAAEC,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAI,CAAC;IAClCC,GAAG,EAAE;EACT,CAAC,CAAC;EAEFJ,OAAO,CAACK,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC;EAE1C,SAASD,aAAaA,CAACE,aAAa,EAAE;IAClC;IACAR,OAAO,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;IACjBC,aAAa,CAACF,aAAa,CAAC;IAC5BG,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;EAC9B;EAEA,SAASD,WAAWA,CAACM,YAAY,EAAE;IAC/B;IACAF,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;EAC7B;EAEE,oBACEf,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBjB,OAAA;MAAAiB,QAAA,EAAI;IAAyB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV;AAACC,EAAA,GA1BQrB,GAAG;AA4BZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}